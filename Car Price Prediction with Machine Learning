import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
import os

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.preprocessing import LabelEncoder

file_path = r'C:\Users\Administrator\Downloads\car data (1).csv'

fuel_type_dict = {'Petrol': 2, 'Diesel': 0, 'CNG': 1}
selling_type_dict = {'Dealer': 0, 'Individual': 1}
transmission_dict = {'Manual': 1, 'Automatic': 0}

def load_and_preprocess_data(path):
    df = pd.read_csv(path)
    df.rename(columns={'Kms_Driven': 'Driven_kms', 'Seller_Type': 'Selling_type'}, inplace=True)

    le = LabelEncoder()
    df['Fuel_Type'] = le.fit_transform(df['Fuel_Type'])
    df['Selling_type'] = le.fit_transform(df['Selling_type'])
    df['Transmission'] = le.fit_transform(df['Transmission'])

    if 'Car_Name' in df.columns:
        df.drop('Car_Name', axis=1, inplace=True)

    df['Driven_kms'] = np.log1p(df['Driven_kms'])

    return df

def train_and_evaluate(df):
    X = df.drop('Selling_Price', axis=1)
    y = df['Selling_Price']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    model = LinearRegression()
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)

    print("\n--- Model Evaluation ---")
    print("MAE:", mean_absolute_error(y_test, y_pred))
    print("MSE:", mean_squared_error(y_test, y_pred))
    print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))
    print("R² Score:", r2_score(y_test, y_pred))

    joblib.dump(model, 'car_price_model.pkl')

    plt.figure(figsize=(8, 6))
    sns.scatterplot(x=y_test, y=y_pred)
    plt.xlabel("Actual Price")
    plt.ylabel("Predicted Price")
    plt.title("Actual vs Predicted Car Prices")
    plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
    plt.tight_layout()
    plt.show()

def predict_from_input(model):
    try:
        print("\n--- Car Selling Price Estimator ---")
        year = int(input("Enter Year of Purchase (e.g., 2018): "))
        present_price = float(input("Enter Present Price (in lakhs, e.g., 5.2): "))
        kms_driven = int(input("Enter Kilometers Driven: "))
        fuel = input("Fuel Type (Petrol/Diesel/CNG): ").capitalize()
        seller = input("Seller Type (Dealer/Individual): ").capitalize()
        transmission = input("Transmission (Manual/Automatic): ").capitalize()
        owner = int(input("Previous Owners (0/1/3): "))

        input_data = pd.DataFrame([{
            'Year': year,
            'Present_Price': present_price,
            'Driven_kms': np.log1p(kms_driven),
            'Fuel_Type': fuel_type_dict.get(fuel, 2),
            'Selling_type': selling_type_dict.get(seller, 0),
            'Transmission': transmission_dict.get(transmission, 1),
            'Owner': owner
        }])

        predicted_price = model.predict(input_data)[0]
        print("Estimated Selling Price: ₹{:.2f} lakhs".format(predicted_price))

    except Exception as e:
        print("Error in input:", e)

if __name__ == '__main__':
    if not os.path.exists('car_price_model.pkl'):
        df = load_and_preprocess_data(file_path)
        train_and_evaluate(df)

    model = joblib.load('car_price_model.pkl')
    predict_from_input(model)
